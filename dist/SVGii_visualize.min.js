!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).SVGii=e.SVGii||{})}(this,(function(e){"use strict";e.addMarkers=function(){document.body.insertAdjacentHTML("afterbegin",'\n<style>\n.showMarkers {\n    marker-start: url(#markerStart);\n    marker-mid: url(#markerEnd);\n    stroke-width: 0.33%;\n}\n</style>\n<svg id="svgMarkers" style="width:0; height:0; position:absolute; z-index:-1;float:left;">\n    <defs>\n        <marker id="markerStart" overflow="visible" viewBox="0 0 10 10" refX="5" refY="5" markerUnits="strokeWidth"\n            markerWidth="10" markerHeight="10" orient="auto-start-reverse">\n            <circle cx="5" cy="5" r="3" fill="green" fill-opacity="1" />>\n\n            <marker id="markerEnd" overflow="visible" viewBox="0 0 10 10" refX="5" refY="5"\n                markerUnits="strokeWidth" markerWidth="10" markerHeight="10" orient="auto-start-reverse">\n                <circle cx="5" cy="5" r="2" fill="red" fill-opacity="0.5" />\n            </marker>\n    </defs>\n</svg>')},e.adjustViewBox=function(e){let t=e.getBBox(),[n,r,l,i]=[t.x,t.y,t.width,t.height];e.setAttribute("viewBox",[n,r,l,i].join(" "))},e.renderCommands=function(e,t="svg1"){let n,r,l,i,c,o,s='<g class="cpt_g cpt_g_top">',a='<g class="cpt_g">';return a+='\n     \n     <style>\n     \n        .cpt_handle {\n            stroke: #ccc;\n        }\n\n        .cpt_g {\n            stroke-width: 0.3%;\n            color: red;\n        }\n\n        .cpt_handle {\n            stroke: currentColor;\n        }\n\n        .cpt_handle_tip {\n            r: 1%;\n            fill: currentColor;\n        }\n\n        .cpt_handle_tip_m {\n            r: 1.5%;\n            display:none;\n            fill: transparent;\n            stroke: currentColor;\n        }\n    </style>\n     \n     \n     <symbol id="ccw_circle" viewBox="-5 -5 110 110" overflow="visible"> \n        <path fill="none" stroke="currentColor" \n    d="M 4 31 c 8 -19 26 -31 46 -31 c 28 0 50 22 50 50 c 0 28 -22 50 -50 50 c -14 0 -36 -6 -46 -31 \n    m -2 -76 v 37 h 37\n    "/>\n    </symbol>\n\n     <symbol id="cw_circle" viewBox="-5 -5 110 110" overflow="visible"> \n        <path fill="none" stroke="currentColor"  transform="scale(-1 1)" transform-origin="center"\n    d="M 4 31 c 8 -19 26 -31 46 -31 c 28 0 50 22 50 50 c 0 28 -22 50 -50 50 c -14 0 -36 -6 -46 -31 \n    m -2 -76 v 37 h 37\n    "/>\n    </symbol>\n\n    \n    ',(e=>{let t=[],n=e.map(((e,t)=>"m"===e.type.toLowerCase()?t:-1)).filter((e=>-1!==e));return 1===n.length?[e]:(n.forEach(((r,l)=>{t.push(e.slice(r,n[l+1]))})),t)})(e).forEach(((e,t)=>{n={x:e[0].values[0],y:e[0].values[1]},c=n;let y='<g class="cpt_g">',d=getPathDataVertices(e),h=!(getPolygonArea(d)<0);e.forEach(((e,t)=>{let{type:a,values:d}=e;if("Z"===a);else{let e="V"!=a&&"H"!=a?d.slice(-2):"V"===a?[c.x,d[0]]:[d[0],c.y];if(o={x:e[0],y:e[1]},"M"===a&&(s+=h?`<use href="#cw_circle" stroke-width="50%" style="color:#fff" x="${n.x}" y="${n.y}" width="2.5%" height="2.5%" transform="translate(-1.25 -1.25)" transform-origin="center" overflow="visible" />\n                        <use href="#cw_circle" stroke-width="15%" x="${n.x}" y="${n.y}"  width="2.5%" height="2.5%" data-transform-origin="center" transform="translate(-1.25 -1.25)" overflow="visible" />`:`<use href="#ccw_circle" stroke-width="50%" style="color:#fff" x="${n.x}" y="${n.y}" width="2.5%" height="2.5%" transform="translate(-1.25 -1.25)" transform-origin="center" overflow="visible" />\n                        <use href="#ccw_circle" stroke-width="15%" x="${n.x}" y="${n.y}"  width="2.5%" height="2.5%" data-transform-origin="center" transform="translate(-1.25 -1.25)" overflow="visible" />`),"C"!==a&&"Q"!==a||(r={x:d[0],y:d[1]},"Q"===a&&(l=r,y+=`<polyline fill="none" class="cpt_handle cpt_handle_q cpt_handle_cp1 " points="${c.x} ${c.y} ${r.x} ${r.y} ${o.x} ${o.y}"/>`,y+=`<circle class="cpt_handle_tip cpt_handle_tip_q" cx="${r.x}" cy="${r.y}" r="1%" >\n      <title>${a.toLowerCase()} - x:${r.x}, y: ${r.y}</title></circle>`),"C"===a&&(l={x:d[2],y:d[3]},y+=`<line class="cpt_handle cpt_handle_c cpt_handle_cp1 " x1="${c.x}" y1="${c.y}"  x2="${r.x}" y2="${r.y}"/>`,y+=`<circle class="cpt_handle_tip" cx="${r.x}" cy="${r.y}" r="1%" >\n      <title>${a.toLowerCase()} - x:${r.x}, y: ${r.y}</title></circle>`,y+=`<line class="cpt_handle cpt_handle_c cpt_handle_cp2" x1="${o.x}" y1="${o.y}"  x2="${l.x}" y2="${l.y}"/>`,y+=`<circle class="cpt_handle_tip" cx="${l.x}" cy="${l.y}" r="1%" >\n      <title>${a.toLowerCase()} - x:${l.x}, y: ${l.y}</title></circle>`)),"T"===a&&(r={x:2*c.x-i.x,y:2*c.y-i.y},l=r,y+=`<polyline fill="none" class="cpt_handle cpt_handle_t cpt_handle_cp1 " points="${c.x} ${c.y} ${r.x} ${r.y} ${o.x} ${o.y}"/>`),"S"===a){let e={x:d[0],y:d[1]},t={x:2*c.x-i.x,y:2*c.y-i.y};y+=`<line class="cpt_handle cpt_handle_s cpt_handle_cp1 " x1="${c.x}" y1="${c.y}"  x2="${t.x}" y2="${t.y}"/>`,y+=`<line class="cpt_handle cpt_handle_s cpt_handle_cp2" x1="${o.x}" y1="${o.y}"  x2="${e.x}" y2="${e.y}"/>`,y+=`<circle class="cpt_handle_tip cpt_handle_tip_s" cx="${e.x}" cy="${e.y}" r="1%" >\n  <title>${a.toLowerCase()} - x:${e.x}, y: ${e.y}</title></circle>`}"Z"!==a&&(y+=`<circle class="cpt_handle_tip cpt_handle_tip_${a.toLowerCase()}" cx="${o.x}" cy="${o.y}" r="1%" >\n  <title>P x:${o.x}, y: ${o.y}</title></circle>`)}c=o,i=l})),a+=y+"</g>"})),a+="</g>",a+=s+"</g>",a},e.renderPath=function(e,t="",n="green",r="1%",l=!0){let i=`<path d="${t}" fill="none" stroke="${n}"  stroke-width="${r}" /> `;if(!l)return i;e.insertAdjacentHTML("beforeend",i)},e.renderPerpendicularLine=
//!!! delete- rename
function(e,t=10,n){return{x:e.x+t*Math.cos(n),y:e.y+t*Math.sin(n)}},e.renderPoint=function(e,t,n="red",r="1%",l="1",i="",c=!0,o="",s=""){Array.isArray(t)&&(t={x:t[0],y:t[1]});let a=`<circle class="${s}" opacity="${l}" id="${o}" cx="${t.x}" cy="${t.y}" r="${r}" fill="${n}">\n  <title>${i}</title></circle>`;if(!c)return a;e.insertAdjacentHTML("beforeend",a)},e.renderPoly=function(e,t,n="1%",r="purple",l=!0){let i=`<polyline  stroke-width="${n}" points="${t=t.map((e=>[e.x,e.y])).flat().join(" ")}" stroke="${r}" />`;if(!l)return i;e.insertAdjacentHTML("beforeend",i)}}));
